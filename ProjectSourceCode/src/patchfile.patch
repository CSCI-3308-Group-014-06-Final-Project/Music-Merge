--- index.js	2024-04-11 02:16:57.544946112 -0600
+++ index.js.2	2024-04-11 01:42:12.539160846 -0600
@@ -59,7 +59,7 @@
 	  console.log('ERROR', error.message || error);
 	});
 // *****************************************************
-// <!-- Section 3 : Connect to Spotify API -->
+// <!-- Section 3 : App Settings -->
 // *****************************************************
 
 app.use(
@@ -69,6 +69,105 @@
 	  resave: false,
 	})
   );
+
+// *****************************************************
+// <!-- Section 3 : Connect to Spotify API -->
+// *****************************************************
+app.get('/register', (req, res) => {
+	res.render('pages/register');
+});
+
+app.post('/register', async (req, res) => { // Mark this function as async
+	const result = await handleAuthFlow(); // Await the promise from handleAuthFlow
+	res.redirect(result); // Use the result for redirection or response
+	const accessToken = await getAccessToken(clientId, code);
+	const profile = await fetchProfile(accessToken);
+	console.log(profile);
+});
+
+
+const clientId = "603b2cf1577c4343a3e7a378ace0be6c";
+const url = require('url');
+let globalUrl;
+const crypto = require('crypto');
+const params = new URLSearchParams(globalUrl);
+console.log("global" + globalUrl)
+const code = params.get("code");
+async function handleAuthFlow() {
+	if (!code) {
+		return await redirectToAuthCodeFlow(clientId);
+	} else {
+		const accessToken = await getAccessToken(clientId, code);
+		return await fetchProfile(accessToken);
+	}
+}
+
+const storage = {};
+
+async function redirectToAuthCodeFlow(clientId) {
+	const verifier = generateCodeVerifier(128);
+	const challenge = await generateCodeChallenge(verifier);
+	storage.verifier = verifier;
+
+	const params = new URLSearchParams();
+	params.append("client_id", clientId);
+	params.append("response_type", "code");
+	params.append("redirect_uri", "http://localhost:3000/login");
+	params.append("scope", "user-read-private user-read-email");
+	params.append("code_challenge_method", "S256");
+	params.append("code_challenge", challenge);
+
+	const redirectUrl = `https://accounts.spotify.com/authorize?${params.toString()}`;
+	return await redirectUrl;
+}
+
+function generateCodeVerifier(length) {
+	let text = '';
+	let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+	for (let i = 0; i < length; i++) {
+		text += possible.charAt(Math.floor(Math.random() * possible.length));
+	}
+	return text;
+}
+
+async function generateCodeChallenge(codeVerifier) {
+	const data = Buffer.from(codeVerifier);
+	const digest = await crypto.subtle.digest('SHA-256', data);
+	return Buffer.from(digest)
+		.toString('base64')
+		.replace(/\+/g, '-')
+		.replace(/\//g, '_')
+		.replace(/=+$/, '');
+}
+
+async function getAccessToken(clientId, code) {
+	const verifier = storage.verifier;
+
+	const params = new URLSearchParams();
+	params.append("client_id", clientId);
+	params.append("grant_type", "authorization_code");
+	params.append("code", code);
+	params.append("redirect_uri", "http://localhost:3000/login");
+	params.append("code_verifier", verifier);
+
+	const result = await fetch("https://accounts.spotify.com/api/token", {
+		method: "POST",
+		headers: { "Content-Type": "application/x-www-form-urlencoded" },
+		body: params
+	});
+	console.log(params)
+
+	const { access_token } = await result.json();
+	return access_token;
+}
+
+async function fetchProfile(token) {
+	const result = await fetch("https://api.spotify.com/v1/me", {
+		method: "GET", headers: { Authorization: `Bearer ${token}` }
+	});
+	return await result.json();
+}
+
 // *****************************************************
 // <!-- Section 4 : API Routes -->
 // *****************************************************
@@ -91,6 +190,7 @@
 });
 
 app.get('/login', (req, res) => { //Login attempt
+	globalUrl = req.query.code;
 	res.render('pages/login');
 });
 
@@ -112,10 +212,6 @@
 		});
 });
 
-app.get('/register', (req, res) => {
-	res.render('pages/register');
-});
-
 
 //logout page
 app.get('/logout', auth, (req, res) => {
@@ -158,59 +254,6 @@
 	res.json({status: 'success', message: 'Welcome!'});
   });
 
-/*
-//SPOTIFY EXAMPLE
-
-// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization
-const token = 'BQAglxA4MOHg0EkibANrmiz3U0lrx0UmnJtgHHM-i_XkdaW4xOnv2R1zsCy3-Jyi32ijbJjg-4dQawjAIBZSrnEY9MgAXCS8epAQh273rR7Cw9iX7k0aoR1kZmboN7_i-tXhj7UCiDII_tAGjYA76C5hoP64zEJNmBT9nrTr7oW7P0ruv26i1NHFvh3EmuZOtAnuk5tZWzyj1kdBm72CGYgexfVmIRBxE9KZj9jD0GFmrfnczyHHZy8QmdHnHDCvY7t_';
-async function fetchWebApi(endpoint, method, body) {
-  const res = await fetch(`https://api.spotify.com/${endpoint}`, {
-    headers: {
-      Authorization: `Bearer ${token}`,
-    },
-    method,
-    body:JSON.stringify(body)
-  });
-  return await res.json();
-}
-
-async function getTopTracks(){
-  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks
-  return (await fetchWebApi(
-    'v1/me/top/tracks?time_range=long_term&limit=5', 'GET'
-  )).items;
-}
-
-const topTracks = await getTopTracks();
-console.log(
-  topTracks?.map(
-    ({name, artists}) =>
-      `${name} by ${artists.map(artist => artist.name).join(', ')}`
-  )
-);
-
-//SPOTIFY EXAMPLE
-*/
-
-app.get('/test', async (req, res) => {
-	const response =
-		await axios({
-			url: ,
-			method: ,
-			dataType: ,
-			headers: {},
-			params: {
-				apikey: process.env.API_KEY,
-			},
-		})
-		  .then(results => {
-		})
-		  .catch(error => {
-			  results: [];
-			  res.render('pages/test', {message: "No playlists"});
-		});
-});
-
 
 // *****************************************************
 // <!-- Section 5 : Start Server-->
